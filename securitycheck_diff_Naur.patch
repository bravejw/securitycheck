diff -Naur ./cppcheck-1.72/lib/checkbufferoverrun.cpp ./cppcheck-1.72_org/lib/checkbufferoverrun.cpp
--- ./cppcheck-1.72/lib/checkbufferoverrun.cpp	2016-03-09 14:12:41.131412652 +0900
+++ ./cppcheck-1.72_org/lib/checkbufferoverrun.cpp	2016-01-09 22:50:01.000000000 +0900
@@ -1065,576 +1065,6 @@
 // Checking local variables in a scope
 //---------------------------------------------------------------------------
 
-#if ENABLE_SECURITY_CHECKER
-#include <iostream>
-
-MathLib::biguint CheckBufferOverrun::getMaxFormatspecifierLen(const Token* tok, const std::list<const Token*> &parameters)
-{
-	const std::string &input_string = tok->str();
-    bool percentCharFound = false;
-    std::size_t input_string_size = 1;
-    bool handleNextParameter = false;
-    std::string digits_string;
-    bool i_d_x_f_found = false;
-    std::list<const Token*>::const_iterator paramIter = parameters.begin();
-    std::size_t parameterLength = 0;
-    for (std::string::size_type i = 0; i < input_string.length(); ++i) {
-        if (input_string[i] == '\\') {
-            if (i < input_string.length() - 1 && input_string[i + 1] == '0')
-                break;
-
-            ++input_string_size;
-            ++i;
-            continue;
-        }
-
-        if (percentCharFound) {
-            switch (input_string[i]) {
-            case 'f':
-            case 'x':
-            case 'X':
-            case 'i':
-                i_d_x_f_found = true;
-                handleNextParameter = true;
-                break;
-            case 'c':
-            case 'e':
-            case 'E':
-            case 'g':
-            case 'o':
-            case 'u':
-            case 'p':
-            	handleNextParameter = true;
-        	    break;
-            case 'n':
-            	reportError(tok, Severity::error, "securitycheck", "%n is denied in format specifier.");
-                handleNextParameter = true;
-                break;
-            case 'd':
-                i_d_x_f_found = true;
-                if (paramIter != parameters.end() && *paramIter && (*paramIter)->tokType() != Token::eString)
-                    parameterLength = (*paramIter)->str().length();
-
-                handleNextParameter = true;
-                break;
-            case 's':
-                if (paramIter != parameters.end() && *paramIter && (*paramIter)->tokType() == Token::eString)
-                    parameterLength = Token::getStrLength(*paramIter);
-
-                handleNextParameter = true;
-                break;
-            }
-        }
-
-        if (input_string[i] == '%')
-            percentCharFound = !percentCharFound;
-        else if (percentCharFound) {
-            digits_string.append(1, input_string[i]);
-        }
-
-        if (!percentCharFound)
-            input_string_size++;
-
-        if (handleNextParameter) {
-            unsigned int tempDigits = static_cast<unsigned int>(std::abs(std::atoi(digits_string.c_str())));
-            if (i_d_x_f_found)
-                tempDigits = std::max(static_cast<unsigned int>(tempDigits), 1U);
-
-            if (digits_string.find('.') != std::string::npos) {
-                const std::string endStr = digits_string.substr(digits_string.find('.') + 1);
-                const unsigned int maxLen = std::max(static_cast<unsigned int>(std::abs(std::atoi(endStr.c_str()))), 1U);
-
-                if (input_string[i] == 's') {
-                    // For strings, the length after the dot "%.2s" will limit
-                    // the length of the string.
-                    if (parameterLength > maxLen)
-                        parameterLength = maxLen;
-                } else {
-                    // For integers, the length after the dot "%.2d" can
-                    // increase required length
-                    if (tempDigits < maxLen)
-                        tempDigits = maxLen;
-                }
-            }
-
-            if (tempDigits < parameterLength)
-                input_string_size += parameterLength;
-            else
-                input_string_size += tempDigits;
-
-            parameterLength = 0;
-            digits_string = "";
-            i_d_x_f_found = false;
-            percentCharFound = false;
-            handleNextParameter = false;
-            if (paramIter != parameters.end())
-                ++paramIter;
-        }
-    }
-
-    return input_string_size;
-}
-
-bool hasSuspiciousVarName(const std::string & varName)
-{
-	//*key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	if(varName.find("key") != std::string::npos && varName.find("pub") == std::string::npos)
-		return true;
-	if(varName.find("id") != std::string::npos)
-		return true;
-	if(varName.find("ip") != std::string::npos)
-		return true;
-	if(varName.find("serial") != std::string::npos)
-		return true;
-	if(varName.find("sn") != std::string::npos)
-		return true;
-	if(varName.find("duid") != std::string::npos)
-		return true;
-	if(varName.find("card") != std::string::npos)
-		return true;
-	if(varName.find("pass") != std::string::npos)
-		return true;
-
-	return false;
-}
-
-static const Token* getInjectedTokenRelatedToToken(const Token* p_param)
-{
-	std::list<ValueFlow::Value>::const_iterator it;
-	for (it = p_param->values.begin(); it != p_param->values.end(); ++it) {
-		//std::cout << "inspect value...\n";
-		if (it->inSecureInputValue)
-		{
-			return it->tokvalue;
-		}
-	}
-	return NULL;
-}
-
-static bool doesGivenTokenStrHasAbsPath(const Token* p_param)
-{
-	if(p_param && p_param->str().length() > 2 && p_param->str().substr(0, 2) != "\"/") // check if it starts with "/   AKA ABS PATH
-		return true;
-	else
-		return false;
-}
-
-void CheckBufferOverrun::checkInsecureInputValueInjection()
-{
-    for (const Token *tok = _tokenizer->tokens(); tok; tok = tok->next())
-	{
-    	if (Token::Match(tok, "exec|execl|execlp|execle|execv|execvp|execvpe|execshell|system|popen|aul_launch_app|sqlite3_exec (")) {
-        	const Token* p_param = tok->tokAt(2);
-
-        	if(tok->str() == "sqlite3_exec") // sqlite3_exec ( db, sqlstatement
-        		p_param = p_param->nextArgument();
-
-        	//std::cout << tok->str() << " detected and it's param's itype =" << p_param->tokType() << "\n";
-        	if(p_param)
-        	{
-				if(p_param->isLiteral()) // exec ("sh -alh");
-				{
-					//std::cout << "LITERAL PARAM DETECTED\n";
-					if(doesGivenTokenStrHasAbsPath(p_param))
-						reportError(tok, Severity::error, "securitycheck", "non abs command injection" + p_param->str() );
-				}
-				else if(p_param->variable())
-				{
-					//std::cout << "VAR DETECTED\n";
-					const Variable *var = p_param->variable();
-
-					// char command[256] = "sh -alh";
-					//                   ^ n
-					// exec(command);
-					if(var->isArray()) // Array has no value. you need to look declare
-					{
-						//std::cout << "Array PARAM DETECTED\n";
-						//const Token* val = var->declEndToken()->next();
-						//std::cout << "VAL = " + val->str() + "\n";
-
-						const Token* injectedToken = getInjectedTokenRelatedToToken(p_param);
-						if(injectedToken)
-						{
-							reportError(tok, Severity::error, "securitycheck",
-							"Insecure input value injected from " + injectedToken->str() + _tokenizer->list.fileLine(injectedToken) + " to " + p_param->str()// + _tokenizer->list.fileLine(tok)
-							);
-						}
-						else
-						{
-							if(var->declEndToken())
-							{
-								const Token* valToken = var->declEndToken()->next();
-								if(doesGivenTokenStrHasAbsPath(valToken))
-									reportError(tok, Severity::error, "securitycheck", "non abs command injection" + valToken->str() );
-							}
-						}
-					}
-
-					// char *command = "sh -alh";
-					// char *command; command = "sh -alh";
-					//              ^ 1       2 3
-					// exec(command);
-					else if(var->isPointer())
-					{
-						//std::cout << "Pointer PARAM DETECTED\n";
-						//val->printValueFlow(false, std::cout);
-						//const Token* tokDecVal = var->declEndToken()->tokAt(3);
-						//std::cout << "DEC = " +  tokDecVal->str() + "\n";
-						//if(p_param->getValueTokenMaxStrLength())
-							//std::cout << "VAL = " + p_param->getValueTokenMaxStrLength()->str() + "\n";
-
-						const Token* injectedToken = getInjectedTokenRelatedToToken(p_param);
-						if(injectedToken)
-						{
-							reportError(tok, Severity::error, "securitycheck",
-							"Insecure input value injected from " + injectedToken->str() + _tokenizer->list.fileLine(injectedToken) + " to " + p_param->str()// + _tokenizer->list.fileLine(tok)
-							);
-						}
-						else
-						{
-							const Token* valToken = p_param->getValueTokenMaxStrLength();
-							if(doesGivenTokenStrHasAbsPath(valToken))
-								reportError(tok, Severity::error, "securitycheck", "non abs command injection" + valToken->str() );
-						}
-					}
-				}
-				else
-				{
-					// TODO : std::cout << "PLANK PLANK : VAR IS NOT A LITERAL or ARRARY or PTR" << __FILE__ << __LINE__ << "\n";
-					;
-				}
-        	}
-            //reportError(tok, Severity::error, "securitycheck", "possible command injection or backdoor via exec.");
-        }
-        // curl related options
-        // in the case of : there is no curl.h
-        else if (Token::Match(tok, "curl_easy_setopt ( %name% , %name% , %num% )"))
-        {
-        	long long inParam = (MathLib::toLongNumber(tok->strAt(6)));
-			if(tok->strAt(4) == "CURLOPT_SSL_VERIFYPEER" && inParam != 1L)
-			{
-				reportError(tok, Severity::error, "securitycheck", "CURLOPT_SSL_VERIFYPEER is disabled.");
-			}
-			else if(tok->strAt(4) == "CURLOPT_SSL_VERIFYHOST" && inParam != 2L)
-			{
-				reportError(tok, Severity::error, "securitycheck", "CURLOPT_SSL_VERIFYHOST is disabled.");
-			}
-		}
-		else if (Token::Match(tok, "curl_easy_setopt ( %name% , CURLOPT_SSLVERSION , CURL_SSLVERSION_SSLv2|CURL_SSLVERSION_SSLv3 )"))
-		{
-				reportError(tok, Severity::error, "securitycheck", "CURL_SSLVERSION_SSLv2,3 is not permitted.");
-		}
-		else if (Token::Match(tok, "chmod ( %any% , %name%|%num% )"))
-		{
-			if(MathLib::isInt(tok->strAt(4))) // in case of octal number example : 0777
-			{
-#define HEX__(n) 0x##n##LU
-#define B8__(x) ((x&0x0000000FLU)?1:0) +((x&0x000000F0LU)?2:0) +((x&0x00000F00LU)?4:0) +((x&0x0000F000LU)?8:0) \
-+((x&0x000F0000LU)?16:0) +((x&0x00F00000LU)?32:0) +((x&0x0F000000LU)?64:0) +((x&0xF0000000LU)?128:0)
-#define B8(d) ((unsigned char)B8__(HEX__(d)))
-#define B16(dmsb,dlsb) (((unsigned short)B8(dmsb)<<8) + B8(dlsb))
-			                                   //  r wxrwxrwx
-				unsigned long violation_mask = B16(0,11111111); // set 0 mask
-				long long inParam = MathLib::toLongNumber(tok->strAt(4));
-				unsigned long castedInParam = (unsigned long) inParam;
-				if(castedInParam & violation_mask)
-				{
-					reportError(tok, Severity::error, "securitycheck", "chmod : you requested too much permission.");
-				}
-			}
-			else
-			{
-				if(tok->strAt(4) != "S_IRUSR") // in case of MACRO
-					reportError(tok, Severity::error, "securitycheck", "chmod : you requested too much permission.");
-			}
-		}
-		else if (Token::Match(tok, "chown ( %any% , %any% , %any% )"))
-		{
-			if(MathLib::isInt(tok->strAt(4)))
-			{
-				if(MathLib::toLongNumber(tok->strAt(4)) == 0)
-					reportError(tok, Severity::error, "securitycheck", "chown : you requested too much permission.");
-			}
-			else if(MathLib::isInt(tok->strAt(6)))
-			{
-				if(MathLib::toLongNumber(tok->strAt(6)) == 0)
-					reportError(tok, Severity::error, "securitycheck", "chown : you requested too much permission.");
-			}
-		}
-		else if (Token::Match(tok, "seteuid|setegid ( %any% )"))
-		{
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not call.");
-		}
-		else if (Token::Match(tok, "chroot|sethostid ( %any% )"))
-		{
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not call.");
-		}
-		else if (Token::Match(tok, "fopen ( %any% , %any% )"))
-		{
-			if(tok->strAt(4).find('w') != std::string::npos)
-			{
-				int search_tok_limit = 30;
-				bool found_target = false;
-				for(const Token *back_tok = tok; back_tok && search_tok_limit > 0 ; back_tok = back_tok->previous())
-				{
-					if(Token::Match(back_tok, "realpath ("))
-					{
-						found_target = true;
-						break;
-					}
-					search_tok_limit--;
-				}
-				if(!found_target)
-				{
-					reportError(tok, Severity::error, "securitycheck", "fopen : you should check symbolic link using realpath.");
-				}
-			}
-		}
-		else if (Token::Match(tok, "rand ( "))
-		{
-			int search_tok_limit = 50;
-			bool found_target = false;
-			for(const Token *back_tok = tok; back_tok && search_tok_limit > 0 ; back_tok = back_tok->previous())
-			{
-				//std::cout << "[bt : " << back_tok->str() << "]\n";
-				if(Token::Match(back_tok, "srand ("))
-				{
-					found_target = true;
-					break;
-				}
-				search_tok_limit--;
-			}
-			if(!found_target)
-			{
-				reportError(tok, Severity::error, "securitycheck", "rand : you should call srand before.");
-			}
-		}
-		else if(Token::Match(tok, "SHA224_Init|SHA1_Init|MD5_Init ("))
-		{
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should use more strong hash function.");
-		}
-		else if(Token::Match(tok, "AES_set_encrypt_key ( %any% , %any%"))
-		{
-			int lowest_aes_strength = 256;
-			int input_value = 0;
-			const Token* p_param = tok->tokAt(4);
-			if(p_param->variable() && p_param->variable()->isIntegralType())
-			{
-					if(p_param->getValueGE(0,_settings))
-					{
-						input_value = (int)p_param->getValueGE(0,_settings)->varvalue;
-						//std::cout << "input from var = " << lowest_aes_strength << "\n";
-					}
-			}
-			else if(MathLib::isInt(p_param->str()))
-			{
-				input_value = (int)MathLib::toLongNumber(p_param->str());
-			}
-
-			if(input_value < lowest_aes_strength)
-				reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should use more long encryption key.");
-		}
-		else if (Token::Match(tok, "AES_ecb_encrypt ( "))
-		{
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should use more strong encryption.");
-
-		}
-		else if (Token::Match(tok, "fwrite ( %var%"))
-		{
-			const Token* p_param = tok->tokAt(2);
-			if(hasSuspiciousVarName(p_param->str()) && p_param->str().find("enc") == std::string::npos)
-			{
-				reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not save important value without encrypt it.");
-			}
-		}
-		else if (Token::Match(tok, "send ( %any% , %var%"))
-		{
-			const Token* p_param = tok->tokAt(4);
-			if(hasSuspiciousVarName(p_param->str()) && p_param->str().find("enc") == std::string::npos)
-			{
-				reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not save important value without encrypt it.");
-			}
-		}
-		else if (Token::Match(tok, "getenv ( %any% )"))
-		{
-
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : env value can be hooked by a hacker.");
-		}
-		else if (Token::Match(tok, "return %var%"))
-		{
-			const Scope * scope = tok->scope();
-			// check if this function is a member function and if it is public
-			if (scope && scope->functionOf && scope->functionOf->isClassOrStruct()
-				&& scope->function && scope->function->access == Public)
-			{
-				// check it return private arrary
-				const Token* p_param = tok->tokAt(1);
-				const Variable *var = p_param->variable();
-				if( var && var->isArray() && var->isPrivate() )
-				{
-					reportError(tok, Severity::error, "securitycheck", tok->str() + " : (broken capsulation) you should not return private array member.");
-				}
-			}
-		}
-		else if (Token::Match(tok, "[;{}] %var% = atoi ( %any% ) ;"))
-		{
-			// search if the assigned varid is de-refed in next 50 tokens.
-
-			const Variable *var = tok->tokAt(1)->variable();
-
-			int search_tok_limit = 50;
-			bool found_target = false;
-			for(const Token *next_tok = tok->tokAt(8) ; next_tok && search_tok_limit > 0 ; next_tok = next_tok->next())
-			{
-				if(Token::Match(next_tok, "%var% [ %varid%", var->declarationId())
-				|| Token::Match(next_tok, "* ( %var% + %varid%", var->declarationId()))
-				{
-					found_target = true;
-					break;
-				}
-				search_tok_limit--;
-			}
-			if(found_target)
-			{
-				reportError(tok, Severity::error, "securitycheck", "you should not use atoied value directly to ptr operation. you need to check it's range and validity");
-			}
-		}
-		else if( Token::Match(tok, "sprintf ( %any%") )
-		{
-			reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not call denied function");
-		}
-    							// snprintf(char* buff, size_t t, format_string, var_arg, ...);
-    							//  0        1   2   3   4   5   6   7
-		else if( Token::Match(tok, "snprintf ( %var% , %any% , %any% , ") )
-		{
-
-
-			// 1. check if it is a var format_string
-			const Token* argtok = tok->tokAt(6); // format_string
-			if(argtok->variable())
-			{
-				reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should use constant string for format specifier or not, it can be injected");
-			}
-			else
-			{
-				// get dest_buffer_size
-				const Variable *var = tok->tokAt(2)->variable();
-				MathLib::bigint arraySize = -1;
-				if(var->isArray())
-				{
-					const ArrayInfo arrayInfo(var, _tokenizer, &_settings->library, var->declarationId());
-					arraySize = arrayInfo.element_size();
-					for (std::size_t i = 0; i < arrayInfo.num().size(); ++i)
-						arraySize *= arrayInfo.num(i);
-
-					//	std::cout << "arraySize = " << arraySize << "\n";
-				}
-				else if(var->isPointer())
-				{
-					// parse malloc size
-					const Token* tokDecVal = var->declEndToken()->tokAt(3);
-					//std::cout << "DEC = " +  tokDecVal->str() + "\n";
-					if(Token::Match(tokDecVal, "malloc ( %num% )"))
-						arraySize = MathLib::toLongNumber(tokDecVal->tokAt(2)->str());
-					//std::cout << "malloc size = " << arraySize << "\n";
-				}
-
-				if(arraySize == -1)
-				{
-					;//std::cout << "filed to get arrarySize\n";
-				}
-				else
-				{
-					// get to be written len using format_string and var args
-					std::list<const Token *> parameters; // variable_args_list
-					const std::string &formatstr(argtok->str());
-					const Token *argtok2 = argtok;
-					while ((argtok2 = argtok2->nextArgument()) != nullptr) {
-						if (Token::Match(argtok2, "%num%|%str% [,)]"))
-							parameters.push_back(argtok2);
-						else
-							parameters.push_back(nullptr);
-					}
-
-					// 2. check %n in getMaxFormatspecifierLen
-					MathLib::biguint maxlen = getMaxFormatspecifierLen(argtok, parameters);
-					//std::cout << "dest_buff size = " << arraySize << ", fmtstr " << argtok->str() + " expected maxlen = " << maxlen << "\n";
-
-					// 3. check buffer overflow
-					if(arraySize < maxlen + 1)
-					{
-						reportError(tok, Severity::error, "securitycheck", tok->str() + " : buffer overflow detected");
-					}
-
-					// 4. check size_t is less or equal than arraySize
-					if(MathLib::isInt(tok->strAt(4)))
-					{
-						long long sizeTVal = MathLib::toLongNumber(tok->strAt(4));
-						if(sizeTVal > arraySize)
-							reportError(tok, Severity::error, "securitycheck", tok->str() + " : size_t is larger than dest_buff size");
-					}
-
-					// 5. check if it process it's return value
-					// Is it worth it?
-					// for example) if(-1 == snprintf(xxx));   or int ret = snprintf(xxx);
-	#if 0
-					const Token* beforeTok = tok->tokAt(-1);
-					if(!(beforeTok->str() == "==" || beforeTok->str() == "!=" || beforeTok->str() == "=") ||
-							!(beforeTok->str() == "(" && beforeTok->previous()->str() == "if")     )
-					{
-						reportError(tok, Severity::error, "securitycheck", tok->str() + " : you need to check it's return value");
-					}
-	#endif
-				}
-
-			}
-
-			//reportError(tok, Severity::error, "securitycheck", tok->str() + " : you should not call denied function");
-		}
-
-
-	} // end of for : iterate all token
-
-
-
-    // encapsulation broken case : set public ptr as a private member
-    {
-    	// get function DB
-    	const SymbolDatabase *symbolDatabase = _tokenizer->getSymbolDatabase();
-        const std::size_t functions = symbolDatabase->functionScopes.size();
-        for (std::size_t i = 0; i < functions; ++i)
-        {
-        	// iterate all function
-            const Scope * scope = symbolDatabase->functionScopes[i];
-            if (scope && scope->functionOf && scope->functionOf->isClassOrStruct()
-            				&& scope->function && scope->function->access == Public)
-            {
-            	// iterate all argument
-				for (unsigned int i = 0; i < scope->function->argCount(); i++)
-				{
-					const Variable *arg = scope->function->getArgumentVar(i);
-					if (arg && arg->declarationId() && Token::Match(arg->typeStartToken(), "%type% * %name% [,)]"))
-					{
-						for (const Token *tok = scope->classStart; tok != scope->classEnd; tok = tok->next())
-						{
-							if (Token::Match(tok, "[;{}] %var% = %varid% ;", arg->declarationId()))
-							{
-								const Token* p_param = tok->tokAt(1);
-								const Variable *var = p_param->variable();
-								if( var && var->isPrivate() )
-								{
-									reportError(tok, Severity::error, "securitycheck", p_param->str() + " : (broken capsulation) you should not assign a ptr to a private member.");
-								}
-							}
-						}
-					}
-				}
-			}
-        }
-    }
-}
-#endif // ENABLE_SECURITY_CHECKER
-
 void CheckBufferOverrun::checkGlobalAndLocalVariable()
 {
     // check string literals
@@ -1692,22 +1122,6 @@
         const Variable * const var = symbolDatabase->getVariableFromVarId(i);
         if (var && var->isArray() && var->dimension(0) > 0) {
             const Token *tok = var->nameToken();
-
-#if ENABLE_SECURITY_CHECKER
-            // inspect VAR Name
-            //std::cout << "VAR_NAME_TOKEN = " << tok->str() << "\n";
-            if(hasSuspiciousVarName(tok->str()) && var->declEndToken())
-            {
-            	//std::cout << "suspicious var name detected" << "\n";
-            	const Token* content_tok = var->declEndToken()->next();
-            	if(content_tok->str() == "{" && content_tok->next() && MathLib::isInt(content_tok->next()->str())) // { 0xAB
-            	{
-           			//std::cout << "number initializer detected" << "\n";
-            		reportError(tok, Severity::error, "securitycheck", tok->str() + " : you have hardcoded an important information. use secure storage instead.");
-            	}
-            }
-#endif // ENABLE_SECURITY_CHECKER
-
             do {
                 if (tok->str() == "{") {
                     if (Token::simpleMatch(tok->previous(), "= {"))
diff -Naur ./cppcheck-1.72/lib/checkbufferoverrun.h ./cppcheck-1.72_org/lib/checkbufferoverrun.h
--- ./cppcheck-1.72/lib/checkbufferoverrun.h	2016-03-02 17:25:10.598901787 +0900
+++ ./cppcheck-1.72_org/lib/checkbufferoverrun.h	2016-01-09 22:50:01.000000000 +0900
@@ -55,16 +55,6 @@
         : Check(myName(), tokenizer, settings, errorLogger) {
     }
 
-#if ENABLE_SECURITY_CHECKER
-    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) {
-    	CheckBufferOverrun checkBufferOverrun(tokenizer, settings, errorLogger);
-    	checkBufferOverrun.checkInsecureInputValueInjection();
-    }
-	/** Check for input injection due to using input value without white list checking to the exec family function */
-	void checkInsecureInputValueInjection();
-	MathLib::biguint getMaxFormatspecifierLen(const Token* tok, const std::list<const Token*> &parameters);
-#endif // ENABLE_SECURITY_CHECKER
-
     void runSimplifiedChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) {
         CheckBufferOverrun checkBufferOverrun(tokenizer, settings, errorLogger);
         checkBufferOverrun.bufferOverrun();
@@ -107,7 +97,7 @@
 
     /** Check for buffer overruns due to copying command-line args to fixed-sized buffers without bounds checking */
     void checkInsecureCmdLineArgs();
-	
+
     /** Information about N-dimensional array */
     class CPPCHECKLIB ArrayInfo {
     private:
diff -Naur ./cppcheck-1.72/lib/config.h ./cppcheck-1.72_org/lib/config.h
--- ./cppcheck-1.72/lib/config.h	2016-01-15 10:41:58.335396317 +0900
+++ ./cppcheck-1.72_org/lib/config.h	2016-01-09 22:50:01.000000000 +0900
@@ -22,6 +22,4 @@
 #include <string>
 static const std::string emptyString;
 
-#define ENABLE_SECURITY_CHECKER 1
-
 #endif // configH
diff -Naur ./cppcheck-1.72/lib/valueflow.cpp ./cppcheck-1.72_org/lib/valueflow.cpp
--- ./cppcheck-1.72/lib/valueflow.cpp	2016-02-05 19:16:21.727022731 +0900
+++ ./cppcheck-1.72_org/lib/valueflow.cpp	2016-01-09 22:50:01.000000000 +0900
@@ -2267,134 +2267,6 @@
     return tok && tok->values.size() == 1U && tok->values.front().varId == 0U;
 }
 
-#if ENABLE_SECURITY_CHECKER
-#include <iostream>
-static void valueFlowAtoiStrlenAndMarkInsecureInput(TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
-{
-    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
-
-
-		//////////////////////////////// process atoi|strlen //////////////////////////////////////
-		if (Token::Match(tok, "atoi|strlen ("))
-		{
-			//std::cout << "Meet " + tok->str() + "param = " + tok->tokAt(2)->str() + "\n";
-			Token *tok_param = tok->tokAt(2);
-			if (tok_param)
-			{
-				Token *tok_str_num = NULL;
-
-				// get tok_str from literal val
-				if(tok_param->tokType() == Token::eString)
-				{
-					tok_str_num = tok_param;
-				}
-				// get tok_str from variable's declaration
-				else if(tok_param->tokType() == Token::eVariable)
-				{
-					const Variable *var = tok_param->variable();
-					if (var && var->isArrayOrPointer())
-					{
-						const Token* tok_var_init = var->nameToken()->next();
-						if (Token::Match(tok_var_init, "; %varid% = %any% ;", var->declarationId())) // var = "XXX"
-						{
-							if(tok_var_init->tokAt(3)->tokType() == Token::eString)
-								tok_str_num = const_cast<Token*>(tok_var_init->tokAt(3));
-						}
-					}
-				}
-
-				// process tok_str_num and addVal
-				if (tok_str_num && tok_str_num->str().length() > 2)
-				{
-					std::string str_str_num = tok_str_num->str().substr(1, tok_str_num->str().length() - 2); // eliminate "
-					if(str_str_num.length() > 0 && MathLib::isInt(str_str_num))
-					{
-						//std::cout << __LINE__;
-						long long actualVal = 0;
-						if(tok->str() == "atoi")
-						{
-							actualVal = MathLib::toLongNumber(str_str_num);
-						}
-						else if(tok->str() == "strlen")
-						{
-							actualVal = str_str_num.length();
-						}
-						else
-						{
-							;//std::cout << "PLANK PLANK !!! internal ERROR" << __FILE__ << __LINE__ << "\n";
-						}
-
-						ValueFlow::Value value(actualVal);
-						value.setKnown();
-						addValue(const_cast<Token*>(tok->astParent()), value);
-						//std::cout << __LINE__;
-					}
-				}
-			}
-		}
-		//////////////////////////////// EOF process atoi|strlen /////////////////////////////////////
-
-		if (Token::Match(tok, "scanf (") )
-		{
-			//std::cout << tok->str() << " in the value flow\n";
-			const Token *argtok2 = tok->tokAt(2);
-			while ((argtok2 = argtok2->nextArgument()) != nullptr)
-			{
-				//std::cout << "found argtok2 = " << argtok2->str() << "and id = " << argtok2->varId() << "\n";
-				const Variable * const var = argtok2->variable();
-
-				if (!var)// || (!var->isLocal() && !var->isArgument())) // skip some
-					continue;
-
-				//std::cout << "setting inSecureInputValue \n";
-
-				//setTokenValue(const_cast<Token*>(argtok2) , value); // try to move flow number?
-
-				ValueFlow::Value value(1234); // number or string...
-				value.tokvalue = tok; // scanf
-				value.inSecureInputValue = true; // insecure input value
-				value.setKnown();
-				value.varId = argtok2->varId();
-				std::list<ValueFlow::Value> values;// = argtok2->values;
-				values.push_back(value);
-
-				valueFlowForward(tok, var->typeStartToken()->scope()->classEnd, var, argtok2->varId(),
-						values, argtok2->isNumber(), tokenlist, errorLogger, settings);
-			}
-		}
-		else if (Token::Match(tok, "strcpy|strncpy|strcat|strncat|fgets|gets ("))
-		{
-			//std::cout << tok->str() << " in the value flow\n";
-			const Token *argtok2 = tok->tokAt(2);
-
-			//std::cout << "found argtok2 = " << argtok2->str() << "and id = " << argtok2->varId() << "\n";
-			const Variable * const var = argtok2->variable();
-
-			if (var)
-			{
-				//std::cout << "setting inSecureInputValue \n";
-				//setTokenValue(const_cast<Token*>(argtok2) , value); // try to move flow number?
-
-				ValueFlow::Value value(1234); // number or string...
-				value.tokvalue = tok; // strcat
-				value.inSecureInputValue = true; // insecure input value
-				value.setKnown();
-				value.varId = argtok2->varId();
-				std::list<ValueFlow::Value> values;// = argtok2->values;
-				values.push_back(value);
-
-				valueFlowForward(tok, var->typeStartToken()->scope()->classEnd, var, argtok2->varId(),
-						values, argtok2->isNumber(), tokenlist, errorLogger, settings);
-			}
-			else // in case of literal
-			{
-				//std::cout << "simplified immediate value is inputed\n";
-			}
-		}
-	}
-}
-#endif // ENABLE_SECURITY_CHECKER
-
 static void valueFlowFunctionReturn(TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
 {
     for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
@@ -2463,9 +2335,6 @@
     valueFlowString(tokenlist);
     valueFlowArray(tokenlist);
     valueFlowPointerAlias(tokenlist);
-#if ENABLE_SECURITY_CHECKER
-	valueFlowAtoiStrlenAndMarkInsecureInput(tokenlist, errorLogger, settings);
-#endif // ENABLE_SECURITY_CHECKER
     valueFlowFunctionReturn(tokenlist, errorLogger, settings);
     valueFlowBitAnd(tokenlist);
     valueFlowForLoop(tokenlist, symboldatabase, errorLogger, settings);
diff -Naur ./cppcheck-1.72/lib/valueflow.h ./cppcheck-1.72_org/lib/valueflow.h
--- ./cppcheck-1.72/lib/valueflow.h	2016-01-15 10:47:19.028706044 +0900
+++ ./cppcheck-1.72_org/lib/valueflow.h	2016-01-09 22:50:01.000000000 +0900
@@ -33,14 +33,8 @@
 namespace ValueFlow {
     class CPPCHECKLIB Value {
     public:
-	
-#if ENABLE_SECURITY_CHECKER
-        explicit Value(long long val = 0) : intvalue(val), tokvalue(nullptr), varvalue(val), condition(0), varId(0U), conditional(false), inconclusive(false), defaultArg(false), valueKind(ValueKind::Possible), inSecureInputValue(false)  {}
-        Value(const Token *c, long long val) : intvalue(val), tokvalue(nullptr), varvalue(val), condition(c), varId(0U), conditional(false), inconclusive(false), defaultArg(false), valueKind(ValueKind::Possible), inSecureInputValue(false)  {}
-#else
         explicit Value(long long val = 0) : intvalue(val), tokvalue(nullptr), varvalue(val), condition(0), varId(0U), conditional(false), inconclusive(false), defaultArg(false), valueKind(ValueKind::Possible) {}
         Value(const Token *c, long long val) : intvalue(val), tokvalue(nullptr), varvalue(val), condition(c), varId(0U), conditional(false), inconclusive(false), defaultArg(false), valueKind(ValueKind::Possible) {}
-#endif
 
         /** int value */
         long long intvalue;
@@ -78,10 +72,6 @@
             Min
         } valueKind;
 
-#if ENABLE_SECURITY_CHECKER
-        bool inSecureInputValue;
-#endif
-
         void setKnown() {
             valueKind = ValueKind::Known;
         }
diff -Naur ./cppcheck-1.72/test/security/10.c ./cppcheck-1.72_org/test/security/10.c
--- ./cppcheck-1.72/test/security/10.c	2016-02-05 09:15:00.605716879 +0900
+++ ./cppcheck-1.72_org/test/security/10.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,15 +0,0 @@
-// ptr function flow
-void myF(char* param)
-{
-	exec(param);
-}
-void f()
-{
-	char *inVal = "/sh -alh";
-	inVal = "rm -rf";
-	myF(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/11.c ./cppcheck-1.72_org/test/security/11.c
--- ./cppcheck-1.72/test/security/11.c	2016-02-05 15:22:20.590100694 +0900
+++ ./cppcheck-1.72_org/test/security/11.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,16 +0,0 @@
-// ptr scanf injection function flow
-void myF(char* param)
-{
-	exec(param);
-}
-void f()
-{
-	char *inVal = "/sh -alh";
-	inVal = "rm -rf";
-	scanf("%s", inVal);
-	myF(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/12.c ./cppcheck-1.72_org/test/security/12.c
--- ./cppcheck-1.72/test/security/12.c	2016-02-05 16:05:13.058145492 +0900
+++ ./cppcheck-1.72_org/test/security/12.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,11 +0,0 @@
-// ptr scanf injection and sqlite3_exec
-void f()
-{
-	char *inVal = malloc(64);
-	scanf("%s", inVal);
-	sqlite3_exec(db, inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/13.c ./cppcheck-1.72_org/test/security/13.c
--- ./cppcheck-1.72/test/security/13.c	2016-02-05 16:14:39.470155356 +0900
+++ ./cppcheck-1.72_org/test/security/13.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-// SSL OPT
-void f()
-{
-	curl_easy_setopt ( easy_handle ,CURLOPT_SSL_VERIFYPEER, 1L);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/14.c ./cppcheck-1.72_org/test/security/14.c
--- ./cppcheck-1.72/test/security/14.c	2016-02-05 16:17:30.982158342 +0900
+++ ./cppcheck-1.72_org/test/security/14.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    curl_easy_setopt ( easy_handle ,CURLOPT_SSL_VERIFYPEER, 0L);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/15.c ./cppcheck-1.72_org/test/security/15.c
--- ./cppcheck-1.72/test/security/15.c	2016-02-05 16:17:13.014158029 +0900
+++ ./cppcheck-1.72_org/test/security/15.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-void f()
-{
-    curl_easy_setopt ( easy_handle ,CURLOPT_SSL_VERIFYHOST, 2L);
-}
-void main()
-{
-	;
-}
-				  
\ No newline at end of file
diff -Naur ./cppcheck-1.72/test/security/16.c ./cppcheck-1.72_org/test/security/16.c
--- ./cppcheck-1.72/test/security/16.c	2016-02-05 16:16:54.362157705 +0900
+++ ./cppcheck-1.72_org/test/security/16.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    curl_easy_setopt ( easy_handle ,CURLOPT_SSL_VERIFYHOST, 0L);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/17.c ./cppcheck-1.72_org/test/security/17.c
--- ./cppcheck-1.72/test/security/17.c	2016-02-05 16:16:37.930157418 +0900
+++ ./cppcheck-1.72_org/test/security/17.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    curl_easy_setopt ( easy_handle, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1_2);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/18.c ./cppcheck-1.72_org/test/security/18.c
--- ./cppcheck-1.72/test/security/18.c	2016-02-05 16:16:16.498157045 +0900
+++ ./cppcheck-1.72_org/test/security/18.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-	curl_easy_setopt ( easy_handle, CURLOPT_SSLVERSION, CURL_SSLVERSION_SSLv2);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/19.c ./cppcheck-1.72_org/test/security/19.c
--- ./cppcheck-1.72/test/security/19.c	2016-02-05 16:15:54.154156656 +0900
+++ ./cppcheck-1.72_org/test/security/19.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    curl_easy_setopt ( easy_handle, CURLOPT_SSLVERSION, CURL_SSLVERSION_SSLv3);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/1.c ./cppcheck-1.72_org/test/security/1.c
--- ./cppcheck-1.72/test/security/1.c	2016-02-05 08:48:43.181689409 +0900
+++ ./cppcheck-1.72_org/test/security/1.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-// abs path
-void f()
-{
-	exec("/sh");
-}
-int main()
-{
-	return 0;
-}
diff -Naur ./cppcheck-1.72/test/security/20.c ./cppcheck-1.72_org/test/security/20.c
--- ./cppcheck-1.72/test/security/20.c	2016-02-05 16:15:33.782156301 +0900
+++ ./cppcheck-1.72_org/test/security/20.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-	chmod ("/usr/bin/elfbin", 0777);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/21.c ./cppcheck-1.72_org/test/security/21.c
--- ./cppcheck-1.72/test/security/21.c	2016-02-05 16:40:36.350182468 +0900
+++ ./cppcheck-1.72_org/test/security/21.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    chmod ( "/usr/bin/elfbin", 0400);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/22.c ./cppcheck-1.72_org/test/security/22.c
--- ./cppcheck-1.72/test/security/22.c	2016-02-05 16:41:24.262183302 +0900
+++ ./cppcheck-1.72_org/test/security/22.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-  chmod ( "/usr/bin/elfbin", S_IRWXU);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/23.c ./cppcheck-1.72_org/test/security/23.c
--- ./cppcheck-1.72/test/security/23.c	2016-02-05 16:29:18.534170664 +0900
+++ ./cppcheck-1.72_org/test/security/23.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,4 +0,0 @@
-void f()
-{
-	chmod ( "/usr/bin/elfbin", S_IRUSR);
-}
diff -Naur ./cppcheck-1.72/test/security/24.c ./cppcheck-1.72_org/test/security/24.c
--- ./cppcheck-1.72/test/security/24.c	2016-02-05 16:29:43.142171092 +0900
+++ ./cppcheck-1.72_org/test/security/24.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,4 +0,0 @@
-void f()
-{
-    chown ( "/usr/bin/elfbin", 0, 0);
-}
diff -Naur ./cppcheck-1.72/test/security/25.c ./cppcheck-1.72_org/test/security/25.c
--- ./cppcheck-1.72/test/security/25.c	2016-02-05 16:30:13.678171624 +0900
+++ ./cppcheck-1.72_org/test/security/25.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,4 +0,0 @@
-void f()
-{
-    chown ( "/usr/bin/elfbin", getuid(), getgid() );
-}
diff -Naur ./cppcheck-1.72/test/security/26.c ./cppcheck-1.72_org/test/security/26.c
--- ./cppcheck-1.72/test/security/26.c	2016-02-05 16:30:36.930172029 +0900
+++ ./cppcheck-1.72_org/test/security/26.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    FILE *pFile = fopen("test.txt", "rw");
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/27.c ./cppcheck-1.72_org/test/security/27.c
--- ./cppcheck-1.72/test/security/27.c	2016-02-05 16:32:14.834173734 +0900
+++ ./cppcheck-1.72_org/test/security/27.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-void f()
-{
-    realpath("test.txt");
-    FILE *pFile = fopen("test.txt", "rw");
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/28.c ./cppcheck-1.72_org/test/security/28.c
--- ./cppcheck-1.72/test/security/28.c	2016-02-05 16:46:32.970188678 +0900
+++ ./cppcheck-1.72_org/test/security/28.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,14 +0,0 @@
-void f()
-{
-	char* pPath = "/usr/bin/storage/abc.txt";
-	char pRealPath[256];
-	//realpath(pPath, pRealPath);
-	if(strcmp(pPath, pRealPath) == 0)
-	{
-		FILE *pFile = fopen(pPath, "rw");
-	}
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/29.c ./cppcheck-1.72_org/test/security/29.c
--- ./cppcheck-1.72/test/security/29.c	2016-02-05 16:34:19.522175905 +0900
+++ ./cppcheck-1.72_org/test/security/29.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    chroot("/usr/bin");
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/2.c ./cppcheck-1.72_org/test/security/2.c
--- ./cppcheck-1.72/test/security/2.c	2016-02-05 08:49:41.533690426 +0900
+++ ./cppcheck-1.72_org/test/security/2.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-// non-abs path
-void f()
-{
-	exec("sh");
-}
-int main()
-{
-	return 0;
-}
diff -Naur ./cppcheck-1.72/test/security/30.c ./cppcheck-1.72_org/test/security/30.c
--- ./cppcheck-1.72/test/security/30.c	2016-02-05 16:31:42.306173168 +0900
+++ ./cppcheck-1.72_org/test/security/30.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    sethostid(0x87AB2L);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/31.c ./cppcheck-1.72_org/test/security/31.c
--- ./cppcheck-1.72/test/security/31.c	2016-02-05 16:31:25.558172876 +0900
+++ ./cppcheck-1.72_org/test/security/31.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-    seteuid(0);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/32.c ./cppcheck-1.72_org/test/security/32.c
--- ./cppcheck-1.72/test/security/32.c	2016-02-05 16:31:06.114172537 +0900
+++ ./cppcheck-1.72_org/test/security/32.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,8 +0,0 @@
-void f()
-{
-	setegid(0);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/33.c ./cppcheck-1.72_org/test/security/33.c
--- ./cppcheck-1.72/test/security/33.c	2016-02-04 16:37:37.204674739 +0900
+++ ./cppcheck-1.72_org/test/security/33.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,21 +0,0 @@
-// Random with srand
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	unsigned int i;
-	srand(time(NULL));
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/34.c ./cppcheck-1.72_org/test/security/34.c
--- ./cppcheck-1.72/test/security/34.c	2016-02-04 15:19:01.488592618 +0900
+++ ./cppcheck-1.72_org/test/security/34.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,20 +0,0 @@
-// Random with out srand
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	unsigned int i;
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/35.c ./cppcheck-1.72_org/test/security/35.c
--- ./cppcheck-1.72/test/security/35.c	2016-02-04 15:05:11.560578165 +0900
+++ ./cppcheck-1.72_org/test/security/35.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,34 +0,0 @@
-// SALT + PASSWD SHA256 or 384 or 512 hash
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	srand(time(NULL));
-	unsigned int i;
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	char passAndSalt[33] = "my16bytepasswd@!";
-	char *pSalt = getRandomString();
-	printf("salt=%s\n", pSalt);
-	strncat(passAndSalt, pSalt, sizeof(passAndSalt) - 1 - strlen(passAndSalt));
-	unsigned char hash[SHA256_DIGEST_LENGTH];
-	SHA256_CTX sha256;
-	SHA256_Init(&sha256);
-	SHA256_Update(&sha256, passAndSalt, strlen(passAndSalt));
-	SHA256_Final(hash, &sha256);
-	int i = 0;
-	for(i = 0; i <= SHA256_DIGEST_LENGTH-1; i++)
-		printf("%02x", hash[i]);
-	if(pSalt)
-		free(pSalt);
-}
diff -Naur ./cppcheck-1.72/test/security/36.c ./cppcheck-1.72_org/test/security/36.c
--- ./cppcheck-1.72/test/security/36.c	2016-02-04 15:10:59.344584222 +0900
+++ ./cppcheck-1.72_org/test/security/36.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,34 +0,0 @@
-// SALT + PASSWD SHA224 hash          weak
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	srand(time(NULL));
-	unsigned int i;
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	char passAndSalt[33] = "my16bytepasswd@!";
-	char *pSalt = getRandomString();
-	printf("salt=%s\n", pSalt);
-	strncat(passAndSalt, pSalt, sizeof(passAndSalt) - 1 - strlen(passAndSalt));
-	unsigned char hash[SHA224_DIGEST_LENGTH];
-	SHA256_CTX SHA224;
-	SHA224_Init(&SHA224);
-	SHA224_Update(&SHA224, passAndSalt, strlen(passAndSalt));
-	SHA224_Final(hash, &SHA224);
-	int i = 0;
-	for(i = 0; i <= SHA224_DIGEST_LENGTH-1; i++)
-		printf("%02x", hash[i]);
-	if(pSalt)
-		free(pSalt);
-}
diff -Naur ./cppcheck-1.72/test/security/37.c ./cppcheck-1.72_org/test/security/37.c
--- ./cppcheck-1.72/test/security/37.c	2016-02-04 15:14:41.356588088 +0900
+++ ./cppcheck-1.72_org/test/security/37.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,34 +0,0 @@
-// SALT + PASSWD SHA1 hash          weak
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	srand(time(NULL));
-	unsigned int i;
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	char passAndSalt[33] = "my16bytepasswd@!";
-	char *pSalt = getRandomString();
-	printf("salt=%s\n", pSalt);
-	strncat(passAndSalt, pSalt, sizeof(passAndSalt) - 1 - strlen(passAndSalt));
-	unsigned char hash[SHA_DIGEST_LENGTH];
-	SHA256_CTX SHA1;
-	SHA1_Init(&SHA1);
-	SHA1_Update(&SHA1, passAndSalt, strlen(passAndSalt));
-	SHA1_Final(hash, &SHA1);
-	int i = 0;
-	for(i = 0; i <= SHA_DIGEST_LENGTH-1; i++)
-		printf("%02x", hash[i]);
-	if(pSalt)
-		free(pSalt);
-}
diff -Naur ./cppcheck-1.72/test/security/38.c ./cppcheck-1.72_org/test/security/38.c
--- ./cppcheck-1.72/test/security/38.c	2016-02-04 15:15:38.284589079 +0900
+++ ./cppcheck-1.72_org/test/security/38.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,35 +0,0 @@
-// SALT + PASSWD MD5 hash          weak
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-#include <openssl/md5.h>
-char* getRandomString()
-{
-	int length = 17;
-	char *string = malloc(length);
-	srand(time(NULL));
-	unsigned int i;
-	for (i = 0; i < length - 1 ; i++)
-		string[i] = rand() % (126 - 33 + 1) + 33;
-	string[length - 1] = 0;
-	return string;
-}
-void main()
-{
-	char passAndSalt[33] = "my16bytepasswd@!";
-	char *pSalt = getRandomString();
-	printf("salt=%s\n", pSalt);
-	strncat(passAndSalt, pSalt, sizeof(passAndSalt) - 1 - strlen(passAndSalt));
-	unsigned char hash[MD5_DIGEST_LENGTH];
-	MD5_CTX MD5;
-	MD5_Init(&MD5);
-	MD5_Update(&MD5, passAndSalt, strlen(passAndSalt));
-	MD5_Final(hash, &MD5);
-	int i = 0;
-	for(i = 0; i <= MD5_DIGEST_LENGTH-1; i++)
-		printf("%02x", hash[i]);
-	if(pSalt)
-		free(pSalt);
-}
diff -Naur ./cppcheck-1.72/test/security/39.c ./cppcheck-1.72_org/test/security/39.c
--- ./cppcheck-1.72/test/security/39.c	2016-02-04 14:30:48.984542247 +0900
+++ ./cppcheck-1.72_org/test/security/39.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,22 +0,0 @@
-// AES ENCRYPT  symmetric key encryption    AES CBC 256
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-void main()
-{
-	static const unsigned char key32[32]= {0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-	AES_KEY aes_ks3;
-	#define IV_SIZE 16
-	unsigned char iv[IV_SIZE];
-	#define BUFF_SIZE 1024
-	unsigned char buf[BUFF_SIZE] = "plz encrypt this message";
-	unsigned char cipher[BUFF_SIZE];
-	memset(iv,0,sizeof(iv)); // init iv
-	AES_set_encrypt_key(key32 ,256 ,&aes_ks3);
-	AES_cbc_encrypt(buf ,cipher ,BUFF_SIZE ,&aes_ks3 ,iv ,AES_ENCRYPT);
-	int i = 0;
-	for(i = 0; i <= BUFF_SIZE-1; i++)
-		printf("%02x", cipher[i]);
-}
diff -Naur ./cppcheck-1.72/test/security/3.c ./cppcheck-1.72_org/test/security/3.c
--- ./cppcheck-1.72/test/security/3.c	2016-02-05 09:31:21.521733962 +0900
+++ ./cppcheck-1.72_org/test/security/3.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,10 +0,0 @@
-// arrary non-abs path
-void f()
-{
-	char inVal[64] = "sh";
-	exec(inVal);
-}
-void main()
-{
-	f();
-}
diff -Naur ./cppcheck-1.72/test/security/40.c ./cppcheck-1.72_org/test/security/40.c
--- ./cppcheck-1.72/test/security/40.c	2016-02-04 14:35:24.116547038 +0900
+++ ./cppcheck-1.72_org/test/security/40.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,22 +0,0 @@
-// AES ENCRYPT  symmetric key encryption          128 bit weak
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-void main()
-{
-	static const unsigned char key32[32]= {0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-	AES_KEY aes_ks3;
-	#define IV_SIZE 16
-	unsigned char iv[IV_SIZE];
-	#define BUFF_SIZE 1024
-	unsigned char buf[BUFF_SIZE] = "plz encrypt this message";
-	unsigned char cipher[BUFF_SIZE];
-	memset(iv,0,sizeof(iv)); // init iv
-	AES_set_encrypt_key(key32 ,128 ,&aes_ks3);
-	AES_cbc_encrypt(buf ,cipher ,BUFF_SIZE ,&aes_ks3 ,iv ,AES_ENCRYPT);
-	int i = 0;
-	for(i = 0; i <= BUFF_SIZE-1; i++)
-		printf("%02x", cipher[i]);
-}
diff -Naur ./cppcheck-1.72/test/security/41.c ./cppcheck-1.72_org/test/security/41.c
--- ./cppcheck-1.72/test/security/41.c	2016-02-04 14:37:42.604549449 +0900
+++ ./cppcheck-1.72_org/test/security/41.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,23 +0,0 @@
-// AES ENCRYPT  symmetric key encryption          128 bit weak with var
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-void main()
-{
-	static const unsigned char key32[32]= {0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-	AES_KEY aes_ks3;
-	#define IV_SIZE 16
-	unsigned char iv[IV_SIZE];
-	#define BUFF_SIZE 1024
-	unsigned char buf[BUFF_SIZE] = "plz encrypt this message";
-	unsigned char cipher[BUFF_SIZE];
-	memset(iv,0,sizeof(iv)); // init iv
-	int key_len=86;
-	AES_set_encrypt_key(key32 ,key_len ,&aes_ks3);
-	AES_cbc_encrypt(buf ,cipher ,BUFF_SIZE ,&aes_ks3 ,iv ,AES_ENCRYPT);
-	int i = 0;
-	for(i = 0; i <= BUFF_SIZE-1; i++)
-		printf("%02x", cipher[i]);
-}
diff -Naur ./cppcheck-1.72/test/security/42.c ./cppcheck-1.72_org/test/security/42.c
--- ./cppcheck-1.72/test/security/42.c	2016-02-04 14:18:58.520529874 +0900
+++ ./cppcheck-1.72_org/test/security/42.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,22 +0,0 @@
-// AES ENCRYPT  symmetric key encryption              electric code book           weak
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <openssl/sha.h>
-#include <openssl/aes.h>
-void main()
-{
-	static const unsigned char key32[32]= {0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-	AES_KEY aes_ks3;
-	#define IV_SIZE 16
-	unsigned char iv[IV_SIZE];
-	#define BUFF_SIZE 1024
-	unsigned char buf[BUFF_SIZE] = "plz encrypt this message";
-	unsigned char cipher[BUFF_SIZE];
-	memset(iv,0,sizeof(iv)); // init iv
-	AES_set_encrypt_key(key32 ,256 ,&aes_ks3);
-	AES_ecb_encrypt(buf, cipher, &aes_ks3, AES_ENCRYPT);
-	int i = 0;
-	for(i = 0; i <= BUFF_SIZE-1; i++)
-	printf("%02x", cipher[i]);
-}
diff -Naur ./cppcheck-1.72/test/security/43.c ./cppcheck-1.72_org/test/security/43.c
--- ./cppcheck-1.72/test/security/43.c	2016-02-23 17:27:12.694353716 +0900
+++ ./cppcheck-1.72_org/test/security/43.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char key32[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, key32, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/44.c ./cppcheck-1.72_org/test/security/44.c
--- ./cppcheck-1.72/test/security/44.c	2016-02-23 17:29:45.738350616 +0900
+++ ./cppcheck-1.72_org/test/security/44.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char pub_key32[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, pub_key32, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/45.c ./cppcheck-1.72_org/test/security/45.c
--- ./cppcheck-1.72/test/security/45.c	2016-02-23 17:30:03.310350260 +0900
+++ ./cppcheck-1.72_org/test/security/45.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char my_id[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, my_id, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/46.c ./cppcheck-1.72_org/test/security/46.c
--- ./cppcheck-1.72/test/security/46.c	2016-02-23 17:30:16.230349999 +0900
+++ ./cppcheck-1.72_org/test/security/46.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char my_duid[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, my_duid, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/47.c ./cppcheck-1.72_org/test/security/47.c
--- ./cppcheck-1.72/test/security/47.c	2016-02-23 17:30:26.706349786 +0900
+++ ./cppcheck-1.72_org/test/security/47.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char card_num[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, card_num, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/48.c ./cppcheck-1.72_org/test/security/48.c
--- ./cppcheck-1.72/test/security/48.c	2016-02-23 17:30:37.114349576 +0900
+++ ./cppcheck-1.72_org/test/security/48.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char passwd[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, passwd, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/49.c ./cppcheck-1.72_org/test/security/49.c
--- ./cppcheck-1.72/test/security/49.c	2016-02-23 17:31:01.026349091 +0900
+++ ./cppcheck-1.72_org/test/security/49.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,18 +0,0 @@
-// saving Informational ID
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	// check Arrary's definition
-	// check var name contains : *key* except pub, *id*, *ip*, *serial*, *sn*, *duid*, *card*, *pass*
-	// AND!! var content : starts with 0x, MII AKA number
-
-	static const unsigned char serial_number[32] =
-		{0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,
-		 0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34,0x56};
-
-	char *pBuf = malloc (32);
-	memcpy(pBuf, serial_number, 32);
-}
-
diff -Naur ./cppcheck-1.72/test/security/4.c ./cppcheck-1.72_org/test/security/4.c
--- ./cppcheck-1.72/test/security/4.c	2016-02-05 09:08:15.645709827 +0900
+++ ./cppcheck-1.72_org/test/security/4.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,10 +0,0 @@
-// ptr non-abs path
-void f()
-{
-	char* inVal = "sh";
-	exec(inVal);
-}
-void main()
-{
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/50.c ./cppcheck-1.72_org/test/security/50.c
--- ./cppcheck-1.72/test/security/50.c	2016-02-23 17:38:23.718340124 +0900
+++ ./cppcheck-1.72_org/test/security/50.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,21 +0,0 @@
-// saving important data
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	char *key32 = malloc(32);
-
-	char* pRes = malloc(PATH_MAX);
-
-	realpath("/etc/payload", pRes);
-	if(!strcmp("/etc/payload", pRes))
-	{
-		// personal identifiable information
-		FILE *fp = fopen("/etc/payload", "rw");
-
-		// saving important data
-		fwrite(key32, 32, 1, fp);
-		fclose(fp);
-	}
-}
diff -Naur ./cppcheck-1.72/test/security/51.c ./cppcheck-1.72_org/test/security/51.c
--- ./cppcheck-1.72/test/security/51.c	2016-02-24 09:42:54.405167928 +0900
+++ ./cppcheck-1.72_org/test/security/51.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,21 +0,0 @@
-// saving important data with encrypted format
-#include <stdio.h>
-#include <limits.h>
-
-void main()
-{
-	char *key32 = malloc(32);
-
-	char* pRes = malloc(PATH_MAX);
-
-	realpath("/etc/payload", pRes);
-	if(!strcmp("/etc/payload", pRes))
-	{
-		// personal identifiable information
-		FILE *fp = fopen("/etc/payload", "rw");
-
-		// saving important data
-		fwrite(key32, 32, 1, fp);
-		fclose(fp);
-	}
-}
diff -Naur ./cppcheck-1.72/test/security/52.c ./cppcheck-1.72_org/test/security/52.c
--- ./cppcheck-1.72/test/security/52.c	2016-02-24 09:42:52.129167974 +0900
+++ ./cppcheck-1.72_org/test/security/52.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,45 +0,0 @@
-// sending Informational ID
-#include<stdio.h> //printf
-#include<string.h>    //strlen
-#include<sys/socket.h>    //socket
-#include<arpa/inet.h> //inet_addr
-
-int main(int argc , char *argv[])
-{
-    int sock;
-    struct sockaddr_in server;
-    char message[1000] , server_reply[2000];
-
-    char *key32 = malloc(32);
-
-    //Create socket
-    sock = socket(AF_INET , SOCK_STREAM , 0);
-    if (sock == -1)
-    {
-        printf("Could not create socket");
-    }
-    puts("Socket created");
-
-    server.sin_addr.s_addr = inet_addr("127.0.0.1");
-    server.sin_family = AF_INET;
-    server.sin_port = htons( 8888 );
-
-    //Connect to remote server
-    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
-    {
-        perror("connect failed. Error");
-        return 1;
-    }
-
-    puts("Connected\n");
-
-	//Send important data
-	if( send(sock , key32 , 32 , 0) < 0)
-	{
-		puts("Send failed");
-		return 1;
-	}
-
-    close(sock);
-    return 0;
-}
diff -Naur ./cppcheck-1.72/test/security/53.c ./cppcheck-1.72_org/test/security/53.c
--- ./cppcheck-1.72/test/security/53.c	2016-02-24 09:42:50.173168013 +0900
+++ ./cppcheck-1.72_org/test/security/53.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,45 +0,0 @@
-// sending Informational ID with encrypted format
-#include<stdio.h> //printf
-#include<string.h>    //strlen
-#include<sys/socket.h>    //socket
-#include<arpa/inet.h> //inet_addr
-
-int main(int argc , char *argv[])
-{
-    int sock;
-    struct sockaddr_in server;
-    char message[1000] , server_reply[2000];
-
-    char *key32 = malloc(32);
-
-    //Create socket
-    sock = socket(AF_INET , SOCK_STREAM , 0);
-    if (sock == -1)
-    {
-        printf("Could not create socket");
-    }
-    puts("Socket created");
-
-    server.sin_addr.s_addr = inet_addr("127.0.0.1");
-    server.sin_family = AF_INET;
-    server.sin_port = htons( 8888 );
-
-    //Connect to remote server
-    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
-    {
-        perror("connect failed. Error");
-        return 1;
-    }
-
-    puts("Connected\n");
-
-	//Send important data
-	if( send(sock , key32 , 32 , 0) < 0)
-	{
-		puts("Send failed");
-		return 1;
-	}
-
-    close(sock);
-    return 0;
-}
diff -Naur ./cppcheck-1.72/test/security/54.c ./cppcheck-1.72_org/test/security/54.c
--- ./cppcheck-1.72/test/security/54.c	2016-02-24 09:45:55.057164269 +0900
+++ ./cppcheck-1.72_org/test/security/54.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,11 +0,0 @@
-// use of getenv()
-#include <stdlib.h>
-
-void main()
-{
-	char* pBuf = NULL;
-	pBuf = getenv("PATH");
-	printf("%s", pBuf);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/55.c ./cppcheck-1.72_org/test/security/55.c
--- ./cppcheck-1.72/test/security/55.c	2016-02-29 13:56:09.739674178 +0900
+++ ./cppcheck-1.72_org/test/security/55.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,30 +0,0 @@
-// ELIMINATE DEBUG DEFINE.
-// for example undef *DEBUG*
-#include <stdio.h>
-
-void main()
-{
-
-	printf("this is a normal code");
-
-	#ifdef DEBUG
-	printf("pre-processor must filter out this commands");
-
-	char *key32 = malloc(32);
-
-	char* pRes = malloc(PATH_MAX);
-
-	realpath("/etc/payload", pRes);
-	if(!strcmp("/etc/payload", pRes))
-	{
-		// personal identifiable information
-		FILE *fp = fopen("/etc/debug_log", "rw");
-
-		// saving important data
-		fwrite(key32, 32, 1, fp);
-		fclose(fp);
-	}
-
-	#endif // DEBUG
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/56.cpp ./cppcheck-1.72_org/test/security/56.cpp
--- ./cppcheck-1.72/test/security/56.cpp	2016-02-24 11:26:47.421041675 +0900
+++ ./cppcheck-1.72_org/test/security/56.cpp	1970-01-01 09:00:00.000000000 +0900
@@ -1,25 +0,0 @@
-// get priv ptr using public method
-#include <stdio.h>
-
-class epgData
-{
-private:
-	char innerArray[64];
-public:
-	char* getVal()
-	{
-		// see if public method returns a private arrary
-		return innerArray;
-	}
-};
-
-void main()
-{
-	epgData myClass = new epgData();
-
-	char* v;
-	v = myClass.getVal();
-	printf("this is a priv member value what is returned from public method : %s", v);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/57.cpp ./cppcheck-1.72_org/test/security/57.cpp
--- ./cppcheck-1.72/test/security/57.cpp	2016-02-25 09:51:28.051407453 +0900
+++ ./cppcheck-1.72_org/test/security/57.cpp	1970-01-01 09:00:00.000000000 +0900
@@ -1,25 +0,0 @@
-// get priv ptr using public method
-#include <stdio.h>
-
-class epgData
-{
-public:
-	char innerArray[64];
-public:
-	char* getVal()
-	{
-		// see if public method returns a private arrary
-		return innerArray;
-	}
-};
-
-void main()
-{
-	epgData myClass = new epgData();
-
-	char* v;
-	v = myClass.getVal();
-	printf("this is a priv member value what is returned from public method : %s", v);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/58.cpp ./cppcheck-1.72_org/test/security/58.cpp
--- ./cppcheck-1.72/test/security/58.cpp	2016-02-25 14:07:09.191096711 +0900
+++ ./cppcheck-1.72_org/test/security/58.cpp	1970-01-01 09:00:00.000000000 +0900
@@ -1,25 +0,0 @@
-// set public ptr as a private member
-#include <stdio.h>
-
-class epgData
-{
-private:
-	char *innerArray;
-public:
-	void setVal(char* arg)
-	{
-		// see if public method set a arg to a private member variable
-		innerArray = arg;
-	}
-};
-
-void main()
-{
-	epgData myClass = new epgData();
-
-	char v[64];
-	scanf("%63s", v);
-	myClass.setVal(v);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/59.cpp ./cppcheck-1.72_org/test/security/59.cpp
--- ./cppcheck-1.72/test/security/59.cpp	2016-02-25 14:07:14.835096597 +0900
+++ ./cppcheck-1.72_org/test/security/59.cpp	1970-01-01 09:00:00.000000000 +0900
@@ -1,26 +0,0 @@
-// set public ptr as a private member
-#include <stdio.h>
-
-class epgData
-{
-public:
-	char *innerArray;
-public:
-	void setVal(char* arg)
-	{
-		// see if public method set a arg to a private member variable
-		innerArray = arg;
-	}
-};
-
-void main()
-{
-	epgData myClass = new epgData();
-
-	char v[64];
-	scanf("%63s", v);
-	myClass.setVal(v);
-
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/5.c ./cppcheck-1.72_org/test/security/5.c
--- ./cppcheck-1.72/test/security/5.c	2016-02-05 13:46:59.722001068 +0900
+++ ./cppcheck-1.72_org/test/security/5.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,13 +0,0 @@
-// array fgets injection
-// this TC is affected from cppcheck's _simplify from processfile
-// simplify changes toks to fgets("/sh", stdin)
-void f()
-{
-	char inVal[64] = "/sh";
-	fgets(inVal, stdin);
-	exec(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/60.c ./cppcheck-1.72_org/test/security/60.c
--- ./cppcheck-1.72/test/security/60.c	2016-02-25 16:33:06.254919333 +0900
+++ ./cppcheck-1.72_org/test/security/60.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,15 +0,0 @@
-#include <stdio.h>
-
-void main()
-{
-	char array[64] = "my data";
-	char inVal[64];
-
-	fgets(inVal, 64, stdin);
-	int offset = atoi(inVal);
-	array[offset] = "X";
-
-	printf("%2x", array[0]);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/61.c ./cppcheck-1.72_org/test/security/61.c
--- ./cppcheck-1.72/test/security/61.c	2016-02-25 16:33:11.266919232 +0900
+++ ./cppcheck-1.72_org/test/security/61.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,15 +0,0 @@
-#include <stdio.h>
-
-void main()
-{
-	char array[64] = "my data";
-	char inVal[64];
-
-	fgets(inVal, 64, stdin);
-	int offset = atoi(inVal);
-	*(array + offset) = "X";
-
-	printf("%2x", array[0]);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/62.c ./cppcheck-1.72_org/test/security/62.c
--- ./cppcheck-1.72/test/security/62.c	2016-02-25 16:33:54.138918363 +0900
+++ ./cppcheck-1.72_org/test/security/62.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,16 +0,0 @@
-#include <stdio.h>
-
-void main()
-{
-	char array[64] = "my data";
-	char inVal[64];
-
-	fgets(inVal, 64, stdin);
-	int offset = atoi(inVal);
-	int offset2 = 1;
-	array[offset2] = "X";
-
-	printf("%2x, given offset = %d", array[0], offset);
-
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/63.c ./cppcheck-1.72_org/test/security/63.c
--- ./cppcheck-1.72/test/security/63.c	2016-03-02 10:35:55.814474179 +0900
+++ ./cppcheck-1.72_org/test/security/63.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,9 +0,0 @@
-// use of denied function
-#include <stdio.h>
-
-void main()
-{
-	char* ptr = malloc(16);
-	sprintf(ptr, "%s", "to be copied");
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/64.c ./cppcheck-1.72_org/test/security/64.c
--- ./cppcheck-1.72/test/security/64.c	2016-03-03 14:15:42.430390294 +0900
+++ ./cppcheck-1.72_org/test/security/64.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,10 +0,0 @@
-// use of unlimited specifier for string e.g. "%s" and
-// did not check return value of snprintf
-#include <stdio.h>
-
-void main()
-{
-	char* ptr = malloc(17);
-	snprintf(ptr, 16, "aa  aa  %s", "to be copied oajefo jboij aw;j ;oj b;oawj ;boij ;oji ");
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/65.c ./cppcheck-1.72_org/test/security/65.c
--- ./cppcheck-1.72/test/security/65.c	2016-03-02 16:56:14.266871549 +0900
+++ ./cppcheck-1.72_org/test/security/65.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,12 +0,0 @@
-// did not process snprintf's return
-#include <stdio.h>
-
-void main()
-{
-	char ptr[16];
-	if(snprintf(ptr, 16, "%15s", "to be copied aboiajwbowj bowjb ;o jab;oij woj") == -1)
-	{
-		printf("snprintf returns fail");
-	}
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/66.c ./cppcheck-1.72_org/test/security/66.c
--- ./cppcheck-1.72/test/security/66.c	2016-03-02 16:57:23.518872755 +0900
+++ ./cppcheck-1.72_org/test/security/66.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,13 +0,0 @@
-// use of variable format string -> variable can be injected
-#include <stdio.h>
-
-void main()
-{
-	char formatStr[256] = "%15s";
-	char ptr[16];
-	if(snprintf(ptr, 16, formatStr, "to be copied aboiajwbowj bowjb ;o jab;oij woj") == -1)
-	{
-		printf("snprintf returns fail");
-	}
-	return;
-}
diff -Naur ./cppcheck-1.72/test/security/6.c ./cppcheck-1.72_org/test/security/6.c
--- ./cppcheck-1.72/test/security/6.c	2016-02-05 13:47:17.394001376 +0900
+++ ./cppcheck-1.72_org/test/security/6.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,13 +0,0 @@
-// arrary scanf injection
-// this TC is affected from cppcheck's _simplify from processfile
-// simplify changes toks to scanf("%s", "/sh")
-void f()
-{
-	char inVal[64] = "/sh";
-	scanf("%s", inVal);
-	exec(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/7.c ./cppcheck-1.72_org/test/security/7.c
--- ./cppcheck-1.72/test/security/7.c	2016-02-05 09:13:12.269714993 +0900
+++ ./cppcheck-1.72_org/test/security/7.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,11 +0,0 @@
-// ptr scanf injection
-void f()
-{
-	char *inVal = malloc(64);
-	scanf("%s", inVal);
-	exec(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/8.c ./cppcheck-1.72_org/test/security/8.c
--- ./cppcheck-1.72/test/security/8.c	2016-02-05 09:13:50.953715666 +0900
+++ ./cppcheck-1.72_org/test/security/8.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,13 +0,0 @@
-// ptr scanf strcpy injection
-void f()
-{
-    char *inVal1 = malloc(64);
-    char *inVal2 = malloc(64);
-    scanf("%s", inVal1);
-    strcpy(inVal2, inVal1);
-    exec(inVal2);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/security/9.c ./cppcheck-1.72_org/test/security/9.c
--- ./cppcheck-1.72/test/security/9.c	2016-02-05 09:14:17.513716129 +0900
+++ ./cppcheck-1.72_org/test/security/9.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,11 +0,0 @@
-// ptr value flow
-void f()
-{
-    char *inVal = "/sh -alh";
-    inVal = "rm -rf";
-    exec(inVal);
-}
-void main()
-{
-	;
-}
diff -Naur ./cppcheck-1.72/test/testbufferoverrun.cpp ./cppcheck-1.72_org/test/testbufferoverrun.cpp
--- ./cppcheck-1.72/test/testbufferoverrun.cpp	2016-03-04 10:31:20.495660471 +0900
+++ ./cppcheck-1.72_org/test/testbufferoverrun.cpp	2016-01-09 22:50:01.000000000 +0900
@@ -23,11 +23,6 @@
 #include <tinyxml2.h>
 #include <climits>
 
-#include <iostream>     // std::cout
-#include <fstream>      // std::ifstream
-#include "preprocessor.h"
-#include "cppcheck.h"
-
 
 class TestBufferOverrun : public TestFixture {
 public:
@@ -71,28 +66,6 @@
         checkBufferOverrun.arrayIndexThenCheck();
     }
 
-    std::string checkWithExtFile(const std::string &path)
-    {
-    	// Clear the error buffer..
-    	errout.str("");
-
-    	std::ifstream file( path );
-    	if ( file )
-    	{
-    		file.close();
-
-    		CppCheck cppcheck(*this, false);
-    		cppcheck.settings().experimental = true;
-    		cppcheck.settings().inconclusive = true;
-    		cppcheck.check(path);
-    	}
-    	else
-    	{
-    		std::cout << "checkWithExtFile can not open test file = " + path + "\n";
-    	}
-    	return path;
-    }
-
     void run() {
         settings0.addEnabled("warning");
         settings0.addEnabled("style");
@@ -263,409 +236,9 @@
 
         TEST_CASE(negativeMemoryAllocationSizeError) // #389
         TEST_CASE(negativeArraySize);
-
-        TEST_CASE(securityExecInputInjection1);
-        TEST_CASE(securityExecInputInjection2);
-        TEST_CASE(securityExecInputInjection3);
-        TEST_CASE(securityExecInputInjection4);
-        TEST_CASE(securityExecInputInjection5);
-        TEST_CASE(securityExecInputInjection6);
-        TEST_CASE(securityExecInputInjection7);
-        TEST_CASE(securityExecInputInjection8);
-        TEST_CASE(securityExecInputInjection9);
-        TEST_CASE(securityExecInputInjection10);
-        TEST_CASE(securityExecInputInjection11);
-        TEST_CASE(securityExecInputInjection12);
-        TEST_CASE(securityExecInputInjection13);
-		TEST_CASE(securityExecInputInjection14);
-		TEST_CASE(securityExecInputInjection15);
-        TEST_CASE(securityExecInputInjection16);
-        TEST_CASE(securityExecInputInjection17);
-		TEST_CASE(securityExecInputInjection18);
-		TEST_CASE(securityExecInputInjection19);
-		TEST_CASE(securityExecInputInjection20);
-		TEST_CASE(securityExecInputInjection21);
-		TEST_CASE(securityExecInputInjection22);
-		TEST_CASE(securityExecInputInjection23);
-		TEST_CASE(securityExecInputInjection24);
-		TEST_CASE(securityExecInputInjection25);
-		TEST_CASE(securityExecInputInjection26);
-		TEST_CASE(securityExecInputInjection27);
-		TEST_CASE(securityExecInputInjection28);
-		TEST_CASE(securityExecInputInjection29);
-		TEST_CASE(securityExecInputInjection30);
-		TEST_CASE(securityExecInputInjection31);
-		TEST_CASE(securityExecInputInjection32);
-		TEST_CASE(securityExecInputInjection33);
-		TEST_CASE(securityExecInputInjection34);
-		TEST_CASE(securityExecInputInjection35);
-		TEST_CASE(securityExecInputInjection36);
-		TEST_CASE(securityExecInputInjection37);
-		TEST_CASE(securityExecInputInjection38);
-		TEST_CASE(securityExecInputInjection39);
-		TEST_CASE(securityExecInputInjection40);
-		TEST_CASE(securityExecInputInjection41);
-		TEST_CASE(securityExecInputInjection42);
-
-		TEST_CASE(securityExecInputInjection43);
-		TEST_CASE(securityExecInputInjection44);
-		TEST_CASE(securityExecInputInjection45);
-		TEST_CASE(securityExecInputInjection46);
-		TEST_CASE(securityExecInputInjection47);
-		TEST_CASE(securityExecInputInjection48);
-		TEST_CASE(securityExecInputInjection49);
-		TEST_CASE(securityExecInputInjection50);
-		TEST_CASE(securityExecInputInjection51);
-		TEST_CASE(securityExecInputInjection52);
-		TEST_CASE(securityExecInputInjection53);
-		TEST_CASE(securityExecInputInjection54);
-		TEST_CASE(securityExecInputInjection55);
-		TEST_CASE(securityExecInputInjection56);
-		TEST_CASE(securityExecInputInjection57);
-		TEST_CASE(securityExecInputInjection58);
-		TEST_CASE(securityExecInputInjection59);
-		TEST_CASE(securityExecInputInjection60);
-		TEST_CASE(securityExecInputInjection61);
-		TEST_CASE(securityExecInputInjection62);
-		TEST_CASE(securityExecInputInjection63);
-		TEST_CASE(securityExecInputInjection64);
-		TEST_CASE(securityExecInputInjection65);
-		TEST_CASE(securityExecInputInjection66);
-
     }
 
 
-    void securityExecInputInjection1()
-    {
-    	std::string sPath = checkWithExtFile("test/security/1.c");
-    	ASSERT_EQUALS("", errout.str());
-    }
-
-    void securityExecInputInjection2() {
-    	std::string sPath = checkWithExtFile("test/security/2.c");
-		ASSERT_EQUALS("[" + sPath + ":4]: (error) non abs command injection\"sh\"\n", errout.str());
-	}
-
-
-    void securityExecInputInjection3() {
-    	std::string sPath = checkWithExtFile("test/security/3.c");
-		ASSERT_EQUALS("[" + sPath + ":5]: (error) non abs command injection\"sh\"\n", errout.str());
-	}
-
-
-    void securityExecInputInjection4() {
-    	std::string sPath = checkWithExtFile("test/security/4.c");
-		ASSERT_EQUALS("[" + sPath + ":5]: (error) non abs command injection\"sh\"\n", errout.str());
-	}
-
-
-    void securityExecInputInjection5() {
-    	std::string sPath = checkWithExtFile("test/security/5.c");
-		ASSERT_EQUALS("[" + sPath + ":8]: (error) Insecure input value injected from fgets[" + sPath + ":7] to inVal\n", errout.str());
-	}
-
-
-    void securityExecInputInjection6() {
-    	std::string sPath = checkWithExtFile("test/security/6.c");
-		ASSERT_EQUALS("[" + sPath + ":8]: (error) Insecure input value injected from scanf[" + sPath + ":7] to inVal\n", errout.str());
-	}
-
-
-    void securityExecInputInjection7() {
-    	std::string sPath = checkWithExtFile("test/security/7.c");
-		ASSERT_EQUALS("[" + sPath + ":6]: (error) Insecure input value injected from scanf[" + sPath + ":5] to inVal\n", errout.str());
-	}
-
-
-	void securityExecInputInjection8() {
-		std::string sPath = checkWithExtFile("test/security/8.c");
-		ASSERT_EQUALS("[" + sPath + ":8]: (error) Insecure input value injected from strcpy[" + sPath + ":7] to inVal2\n", errout.str());
-	}
-
-
-    void securityExecInputInjection9() {
-    	std::string sPath = checkWithExtFile("test/security/9.c");
-		ASSERT_EQUALS("[" + sPath + ":6]: (error) non abs command injection\"rm -rf\"\n", errout.str());
-	}
-
-
-    void securityExecInputInjection10() {
-    	std::string sPath = checkWithExtFile("test/security/10.c");
-		ASSERT_EQUALS("[" + sPath + ":4]: (error) non abs command injection\"rm -rf\"\n", errout.str());
-	}
-
-
-
-	void securityExecInputInjection11() {
-		std::string sPath = checkWithExtFile("test/security/11.c");
-		ASSERT_EQUALS("[" + sPath + ":4]: (error) Insecure input value injected from scanf[" + sPath + ":10] to param\n", errout.str());
-	}
-
-
-	void securityExecInputInjection12() {
-		std::string sPath = checkWithExtFile("test/security/12.c");
-		ASSERT_EQUALS("[" + sPath + ":6]: (error) Insecure input value injected from scanf[" + sPath + ":5] to inVal\n", errout.str());
-	}
-
-	void securityExecInputInjection13() {
-			std::string sPath = checkWithExtFile("test/security/13.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-	void securityExecInputInjection14() {
-			std::string sPath = checkWithExtFile("test/security/14.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) CURLOPT_SSL_VERIFYPEER is disabled.\n", errout.str());
-		}
-
-	void securityExecInputInjection15() {
-			std::string sPath = checkWithExtFile("test/security/15.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-	void securityExecInputInjection16() {
-			std::string sPath = checkWithExtFile("test/security/16.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) CURLOPT_SSL_VERIFYHOST is disabled.\n", errout.str());
-	}
-
-	void securityExecInputInjection17() {
-			std::string sPath = checkWithExtFile("test/security/17.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-	void securityExecInputInjection18() {
-			std::string sPath = checkWithExtFile("test/security/18.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) CURL_SSLVERSION_SSLv2,3 is not permitted.\n", errout.str());
-		}
-
-	void securityExecInputInjection19() {
-			std::string sPath = checkWithExtFile("test/security/19.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) CURL_SSLVERSION_SSLv2,3 is not permitted.\n", errout.str());
-		}
-		
-	void securityExecInputInjection20() {
-			std::string sPath = checkWithExtFile("test/security/20.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) chmod : you requested too much permission.\n", errout.str());
-		}
-
-		void securityExecInputInjection21() {
-			std::string sPath = checkWithExtFile("test/security/21.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-		
-		void securityExecInputInjection22() {
-			std::string sPath = checkWithExtFile("test/security/22.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) chmod : you requested too much permission.\n", errout.str());
-		}
-		
-		void securityExecInputInjection23() {
-			std::string sPath = checkWithExtFile("test/security/23.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-		
-		void securityExecInputInjection24() {
-			std::string sPath = checkWithExtFile("test/security/24.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) chown : you requested too much permission.\n", errout.str());
-		}
-		
-		void securityExecInputInjection25() {
-			std::string sPath = checkWithExtFile("test/security/25.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-		
-		void securityExecInputInjection26() {
-			std::string sPath = checkWithExtFile("test/security/26.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) fopen : you should check symbolic link using realpath.\n", errout.str());
-		}
-		
-		void securityExecInputInjection27() {
-			std::string sPath = checkWithExtFile("test/security/27.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-		
-		void securityExecInputInjection28() {
-			std::string sPath = checkWithExtFile("test/security/28.c");
-			ASSERT_EQUALS("[" + sPath + ":8]: (error) fopen : you should check symbolic link using realpath.\n", errout.str());
-		}
-		
-		void securityExecInputInjection29() {
-			std::string sPath = checkWithExtFile("test/security/29.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) chroot : you should not call.\n", errout.str());
-		}
-		
-		void securityExecInputInjection30() {
-			std::string sPath = checkWithExtFile("test/security/30.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) sethostid : you should not call.\n", errout.str());
-		}
-		
-		void securityExecInputInjection31() {
-			std::string sPath = checkWithExtFile("test/security/31.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) seteuid : you should not call.\n", errout.str());
-		}
-		
-		void securityExecInputInjection32() {
-			std::string sPath = checkWithExtFile("test/security/32.c");
-			ASSERT_EQUALS("[" + sPath + ":3]: (error) setegid : you should not call.\n", errout.str());
-		}
-
-		void securityExecInputInjection33() {
-			std::string sPath = checkWithExtFile("test/security/33.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-
-		void securityExecInputInjection34() {
-			std::string sPath = checkWithExtFile("test/security/34.c");
-			ASSERT_EQUALS("[" + sPath + ":13]: (error) rand : you should call srand before.\n", errout.str());
-		}
-		
-		void securityExecInputInjection35() {
-			std::string sPath = checkWithExtFile("test/security/35.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-
-		void securityExecInputInjection36() {
-			std::string sPath = checkWithExtFile("test/security/36.c");
-			ASSERT_EQUALS("[" + sPath + ":26]: (error) SHA224_Init : you should use more strong hash function.\n", errout.str());
-		}
-
-		void securityExecInputInjection37() {
-			std::string sPath = checkWithExtFile("test/security/37.c");
-			ASSERT_EQUALS("[" + sPath + ":26]: (error) SHA1_Init : you should use more strong hash function.\n", errout.str());
-		}
-
-		void securityExecInputInjection38() {
-			std::string sPath = checkWithExtFile("test/security/38.c");
-			ASSERT_EQUALS("[" + sPath + ":27]: (error) MD5_Init : you should use more strong hash function.\n", errout.str());
-		}
-		
-		void securityExecInputInjection39() {
-			std::string sPath = checkWithExtFile("test/security/39.c");
-			ASSERT_EQUALS("[" + sPath + ":9]: (error) key32 : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-
-		void securityExecInputInjection40() {
-			std::string sPath = checkWithExtFile("test/security/40.c");
-			ASSERT_EQUALS("[" + sPath + ":17]: (error) AES_set_encrypt_key : you should use more long encryption key.\n"
-					+ "[" + sPath + ":9]: (error) key32 : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-
-		void securityExecInputInjection41() {
-			std::string sPath = checkWithExtFile("test/security/41.c");
-			ASSERT_EQUALS("[" + sPath + ":18]: (error) AES_set_encrypt_key : you should use more long encryption key.\n"
-					+ "[" + sPath + ":9]: (error) key32 : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-
-		void securityExecInputInjection42() {
-			std::string sPath = checkWithExtFile("test/security/42.c");
-			ASSERT_EQUALS("[" + sPath + ":18]: (error) AES_ecb_encrypt : you should use more strong encryption.\n"
-					+ "[" + sPath + ":9]: (error) key32 : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-
-		void securityExecInputInjection43() {
-			std::string sPath = checkWithExtFile("test/security/43.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) key32 : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection44() {
-			std::string sPath = checkWithExtFile("test/security/44.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-		void securityExecInputInjection45() {
-			std::string sPath = checkWithExtFile("test/security/45.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) my_id : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection46() {
-			std::string sPath = checkWithExtFile("test/security/46.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) my_duid : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection47() {
-			std::string sPath = checkWithExtFile("test/security/47.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) card_num : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection48() {
-			std::string sPath = checkWithExtFile("test/security/48.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) passwd : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection49() {
-			std::string sPath = checkWithExtFile("test/security/49.c");
-			ASSERT_EQUALS("[" + sPath + ":11]: (error) serial_number : you have hardcoded an important information. use secure storage instead.\n", errout.str());
-		}
-		void securityExecInputInjection50() {
-			std::string sPath = checkWithExtFile("test/security/50.c");
-			ASSERT_EQUALS("[" + sPath + ":18]: (error) fwrite : you should not save important value without encrypt it.\n", errout.str());
-		}
-		void securityExecInputInjection51() {
-			std::string sPath = checkWithExtFile("test/security/51.c");
-			ASSERT_EQUALS("[" + sPath + ":18]: (error) fwrite : you should not save important value without encrypt it.\n", errout.str());
-		}
-		void securityExecInputInjection52() {
-			std::string sPath = checkWithExtFile("test/security/52.c");
-			ASSERT_EQUALS("[" + sPath + ":37]: (error) send : you should not save important value without encrypt it.\n", errout.str());
-		}
-		void securityExecInputInjection53() {
-			std::string sPath = checkWithExtFile("test/security/53.c");
-			ASSERT_EQUALS("[" + sPath + ":37]: (error) send : you should not save important value without encrypt it.\n", errout.str());
-		}
-
-		void securityExecInputInjection54() {
-			std::string sPath = checkWithExtFile("test/security/54.c");
-			ASSERT_EQUALS("[" + sPath + ":7]: (error) getenv : env value can be hooked by a hacker.\n", errout.str());
-		}
-
-		void securityExecInputInjection55() {
-			std::string sPath = checkWithExtFile("test/security/55.c");
-			ASSERT_EQUALS("[" + sPath + ":24]: (error) fwrite : you should not save important value without encrypt it.\n", errout.str());
-		}
-
-		void securityExecInputInjection56() {
-			std::string sPath = checkWithExtFile("test/security/56.cpp");
-			ASSERT_EQUALS("[" + sPath + ":12]: (error) return : (broken capsulation) you should not return private array member.\n", errout.str());
-		}
-
-		void securityExecInputInjection57() {
-			std::string sPath = checkWithExtFile("test/security/57.cpp");
-			ASSERT_EQUALS("", errout.str());
-		}
-
-		void securityExecInputInjection58() {
-			std::string sPath = checkWithExtFile("test/security/58.cpp");
-			ASSERT_EQUALS("[" + sPath + ":10]: (error) innerArray : (broken capsulation) you should not assign a ptr to a private member.\n", errout.str());
-		}
-
-		void securityExecInputInjection59() {
-			std::string sPath = checkWithExtFile("test/security/59.cpp");
-			ASSERT_EQUALS("", errout.str());
-		}
-
-		void securityExecInputInjection60() {
-			std::string sPath = checkWithExtFile("test/security/60.c");
-			ASSERT_EQUALS("[" + sPath + ":9]: (error) you should not use atoied value directly to ptr operation. you need to check it's range and validity\n", errout.str());
-		}
-
-		void securityExecInputInjection61() {
-			std::string sPath = checkWithExtFile("test/security/61.c");
-			ASSERT_EQUALS("[" + sPath + ":9]: (error) you should not use atoied value directly to ptr operation. you need to check it's range and validity\n", errout.str());
-		}
-
-		void securityExecInputInjection62() {
-			std::string sPath = checkWithExtFile("test/security/62.c");
-			ASSERT_EQUALS("", errout.str());
-		}
-
-		void securityExecInputInjection63() {
-			std::string sPath = checkWithExtFile("test/security/63.c");
-			ASSERT_EQUALS("[" + sPath + ":7]: (error) sprintf : you should not call denied function\n", errout.str());
-		}
-
-		void securityExecInputInjection64() {
-			std::string sPath = checkWithExtFile("test/security/64.c");
-			ASSERT_EQUALS("[" + sPath + ":8]: (error) snprintf : buffer overflow detected\n", errout.str());
-		}
-
-		void securityExecInputInjection65() {
-			std::string sPath = checkWithExtFile("test/security/65.c");
-			ASSERT_EQUALS("[" + sPath + ":7]: (error) snprintf : buffer overflow detected\n", errout.str());
-		}
-
-		void securityExecInputInjection66() {
-			std::string sPath = checkWithExtFile("test/security/66.c");
-			ASSERT_EQUALS("[" + sPath + ":8]: (error) snprintf : you should use constant string for format specifier or not, it can be injected\n", errout.str());
-		}
 
     void noerr1() {
         check("extern int ab;\n"
